generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id
  name  String @db.VarChar(100)
  email String @unique @db.VarChar(100)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, email])
}

model Product {
  id         String  @id @default(uuid())
  title      String  @db.VarChar(200)
  price      Float
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)

  images     Image[]
  orderItems OrderItem[]

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  color      Color    @relation(fields: [colorId], references: [id], onDelete: Cascade)
  colorId    String
  size       Size     @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  sizeId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Color {
  id    String @id @default(uuid())
  name  String @unique @db.VarChar(100)
  color String @unique @db.VarChar(10)

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Size {
  id    String @id @default(uuid())
  name  String @unique @db.VarChar(100)
  value String @unique @db.VarChar(10)

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id  String @id @default(uuid())
  url String @db.Text

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String @id @default(uuid())
  name      String @unique @db.VarChar(100)
  billboard String @db.Text
  title     String @db.VarChar(50)

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id     String  @id @default(uuid())
  amount Float
  total  Int
  isPaid Boolean @default(false)

  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id     String @id @default(uuid())
  amount Float
  total  Int

  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
